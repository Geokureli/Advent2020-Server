// Generated by Haxe 4.1.4
(function ($hx_exports, $global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
class Game {
	constructor() {
	}
	processMessage(type,data,avatar,state) {
		if(avatar == null) {
			return;
		}
		if(type == "avatar") {
			if(data.x != null) {
				avatar.x = data.x;
			}
			if(data.y != null) {
				avatar.y = data.y;
			}
			if(data.color != null) {
				avatar.color = data.color;
			}
			if(data.state != null) {
				avatar.state = data.state;
			}
		}
	}
	init() {
	}
	update(dt,state) {
	}
}
$hx_exports["Game"] = Game;
Game.__name__ = true;
Object.assign(Game.prototype, {
	__class__: Game
});
class HxOverrides {
	static remove(a,obj) {
		let i = a.indexOf(obj);
		if(i == -1) {
			return false;
		}
		a.splice(i,1);
		return true;
	}
	static now() {
		return Date.now();
	}
}
HxOverrides.__name__ = true;
class Lambda {
	static count(it,pred) {
		let n = 0;
		if(pred == null) {
			let _ = $getIterator(it);
			while(_.hasNext()) {
				let _1 = _.next();
				++n;
			}
		} else {
			let x = $getIterator(it);
			while(x.hasNext()) {
				let x1 = x.next();
				if(pred(x1)) {
					++n;
				}
			}
		}
		return n;
	}
}
Lambda.__name__ = true;
Math.__name__ = true;
class Reflect {
	static getProperty(o,field) {
		let tmp;
		if(o == null) {
			return null;
		} else {
			let tmp1;
			if(o.__properties__) {
				tmp = o.__properties__["get_" + field];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				return o[tmp]();
			} else {
				return o[field];
			}
		}
	}
}
Reflect.__name__ = true;
class Std {
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
}
Std.__name__ = true;
class Type {
	static createInstance(cl,args) {
		let ctor = Function.prototype.bind.apply(cl,[null].concat(args));
		return new (ctor);
	}
}
Type.__name__ = true;
class GState {
	constructor(avatars) {
		this.avatars = avatars;
	}
}
GState.__name__ = true;
Object.assign(GState.prototype, {
	__class__: GState
});
class AvatarState {
	constructor(id,x,y) {
		this.id = id;
		this.x = x;
		this.y = y;
	}
}
AvatarState.__name__ = true;
Object.assign(AvatarState.prototype, {
	__class__: AvatarState
});
class haxe_IMap {
}
haxe_IMap.__name__ = true;
haxe_IMap.__isInterface__ = true;
Object.assign(haxe_IMap.prototype, {
	__class__: haxe_IMap
});
class haxe_Exception extends Error {
	constructor(message,previous,native) {
		super(message);
		this.message = message;
		this.__previousException = previous;
		this.__nativeException = native != null ? native : this;
	}
	get_native() {
		return this.__nativeException;
	}
	static thrown(value) {
		if(((value) instanceof haxe_Exception)) {
			return value.get_native();
		} else if(((value) instanceof Error)) {
			return value;
		} else {
			let e = new haxe_ValueException(value);
			return e;
		}
	}
}
haxe_Exception.__name__ = true;
haxe_Exception.__super__ = Error;
Object.assign(haxe_Exception.prototype, {
	__class__: haxe_Exception
	,__properties__: {get_native: "get_native"}
});
class haxe__$Int64__$_$_$Int64 {
	constructor(high,low) {
		this.high = high;
		this.low = low;
	}
}
haxe__$Int64__$_$_$Int64.__name__ = true;
Object.assign(haxe__$Int64__$_$_$Int64.prototype, {
	__class__: haxe__$Int64__$_$_$Int64
});
class haxe_ValueException extends haxe_Exception {
	constructor(value,previous,native) {
		super(String(value),previous,native);
		this.value = value;
	}
}
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
Object.assign(haxe_ValueException.prototype, {
	__class__: haxe_ValueException
});
class haxe_ds_IntMap {
	constructor() {
		this.h = { };
	}
	set(key,value) {
		this.h[key] = value;
	}
	get(key) {
		return this.h[key];
	}
	exists(key) {
		return this.h.hasOwnProperty(key);
	}
	remove(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	keys() {
		let a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(key | 0);
		return new haxe_iterators_ArrayIterator(a);
	}
	iterator() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			let i = this.it.next();
			return this.ref[i];
		}};
	}
}
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_IntMap.prototype, {
	__class__: haxe_ds_IntMap
});
class haxe_ds_StringMap {
	constructor() {
		this.h = Object.create(null);
	}
	exists(key) {
		return Object.prototype.hasOwnProperty.call(this.h,key);
	}
	get(key) {
		return this.h[key];
	}
	set(key,value) {
		this.h[key] = value;
	}
	remove(key) {
		if(Object.prototype.hasOwnProperty.call(this.h,key)) {
			delete(this.h[key]);
			return true;
		} else {
			return false;
		}
	}
}
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_StringMap.prototype, {
	__class__: haxe_ds_StringMap
});
class haxe_io_Bytes {
	constructor(data) {
		this.length = data.byteLength;
		this.b = new Uint8Array(data);
		this.b.bufferValue = data;
		data.hxBytes = this;
		data.bytes = this.b;
	}
	getDouble(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	getFloat(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	getInt32(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	getInt64(pos) {
		let this1 = new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
		return this1;
	}
	getString(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		let s = "";
		let b = this.b;
		let i = pos;
		let max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			let debug = pos > 0;
			while(i < max) {
				let c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					let code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					let c2 = b[i++];
					let code = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else {
					let c2 = b[i++];
					let c3 = b[i++];
					let u = (c & 15) << 18 | (c2 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				let c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
}
haxe_io_Bytes.__name__ = true;
Object.assign(haxe_io_Bytes.prototype, {
	__class__: haxe_io_Bytes
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
haxe_iterators_ArrayIterator.__name__ = true;
Object.assign(haxe_iterators_ArrayIterator.prototype, {
	__class__: haxe_iterators_ArrayIterator
});
class io_colyseus_serializer_schema_ArraySchema_$Dynamic {
	constructor() {
		this.items = [];
	}
	get_length() {
		return this.items.length;
	}
	onAdd(item,key) {
	}
	onChange(item,key) {
	}
	onRemove(item,key) {
	}
	clone() {
		let cloned = new io_colyseus_serializer_schema_ArraySchema_$Dynamic();
		cloned.items = this.items.slice();
		cloned.onAdd = $bind(this,this.onAdd);
		cloned.onChange = $bind(this,this.onChange);
		cloned.onRemove = $bind(this,this.onRemove);
		return cloned;
	}
	iterator() {
		return new haxe_iterators_ArrayIterator(this.items);
	}
	toString() {
		let data = [];
		let _g = 0;
		let _g1 = this.items;
		while(_g < _g1.length) {
			let item = _g1[_g];
			++_g;
			data.push("" + Std.string(item));
		}
		return "ArraySchema(" + Lambda.count(this.items) + ") { " + data.join(", ") + " } ";
	}
}
io_colyseus_serializer_schema_ArraySchema_$Dynamic.__name__ = true;
Object.assign(io_colyseus_serializer_schema_ArraySchema_$Dynamic.prototype, {
	__class__: io_colyseus_serializer_schema_ArraySchema_$Dynamic
	,__properties__: {get_length: "get_length"}
});
class io_colyseus_serializer_schema_ArraySchema_$io_$colyseus_$serializer_$schema_$ReflectionField {
	constructor() {
		this.items = [];
	}
	get_length() {
		return this.items.length;
	}
	onAdd(item,key) {
	}
	onChange(item,key) {
	}
	onRemove(item,key) {
	}
	clone() {
		let cloned = new io_colyseus_serializer_schema_ArraySchema_$io_$colyseus_$serializer_$schema_$ReflectionField();
		cloned.items = this.items.slice();
		cloned.onAdd = $bind(this,this.onAdd);
		cloned.onChange = $bind(this,this.onChange);
		cloned.onRemove = $bind(this,this.onRemove);
		return cloned;
	}
	iterator() {
		return new haxe_iterators_ArrayIterator(this.items);
	}
	toString() {
		let data = [];
		let _g = 0;
		let _g1 = this.items;
		while(_g < _g1.length) {
			let item = _g1[_g];
			++_g;
			data.push("" + Std.string(item));
		}
		return "ArraySchema(" + Lambda.count(this.items) + ") { " + data.join(", ") + " } ";
	}
}
io_colyseus_serializer_schema_ArraySchema_$io_$colyseus_$serializer_$schema_$ReflectionField.__name__ = true;
Object.assign(io_colyseus_serializer_schema_ArraySchema_$io_$colyseus_$serializer_$schema_$ReflectionField.prototype, {
	__class__: io_colyseus_serializer_schema_ArraySchema_$io_$colyseus_$serializer_$schema_$ReflectionField
	,__properties__: {get_length: "get_length"}
});
class io_colyseus_serializer_schema_ArraySchema_$io_$colyseus_$serializer_$schema_$ReflectionType {
	constructor() {
		this.items = [];
	}
	get_length() {
		return this.items.length;
	}
	onAdd(item,key) {
	}
	onChange(item,key) {
	}
	onRemove(item,key) {
	}
	clone() {
		let cloned = new io_colyseus_serializer_schema_ArraySchema_$io_$colyseus_$serializer_$schema_$ReflectionType();
		cloned.items = this.items.slice();
		cloned.onAdd = $bind(this,this.onAdd);
		cloned.onChange = $bind(this,this.onChange);
		cloned.onRemove = $bind(this,this.onRemove);
		return cloned;
	}
	iterator() {
		return new haxe_iterators_ArrayIterator(this.items);
	}
	toString() {
		let data = [];
		let _g = 0;
		let _g1 = this.items;
		while(_g < _g1.length) {
			let item = _g1[_g];
			++_g;
			data.push("" + Std.string(item));
		}
		return "ArraySchema(" + Lambda.count(this.items) + ") { " + data.join(", ") + " } ";
	}
}
io_colyseus_serializer_schema_ArraySchema_$io_$colyseus_$serializer_$schema_$ReflectionType.__name__ = true;
Object.assign(io_colyseus_serializer_schema_ArraySchema_$io_$colyseus_$serializer_$schema_$ReflectionType.prototype, {
	__class__: io_colyseus_serializer_schema_ArraySchema_$io_$colyseus_$serializer_$schema_$ReflectionType
	,__properties__: {get_length: "get_length"}
});
class io_colyseus_serializer_schema_MapSchema_$Dynamic {
	constructor() {
		this.items = new io_colyseus_serializer_schema_OrderedMap(new haxe_ds_StringMap());
	}
	get_length() {
		return this.items._keys.length;
	}
	onAdd(item,key) {
	}
	onChange(item,key) {
	}
	onRemove(item,key) {
	}
	clone() {
		let cloned = new io_colyseus_serializer_schema_MapSchema_$Dynamic();
		let _g_current = 0;
		let _g_array = this.items._keys;
		while(_g_current < _g_array.length) {
			let key = _g_array[_g_current++];
			cloned.items.set(key,this.items.get(key));
		}
		cloned.onAdd = $bind(this,this.onAdd);
		cloned.onChange = $bind(this,this.onChange);
		cloned.onRemove = $bind(this,this.onRemove);
		return cloned;
	}
	iterator() {
		return this.items.iterator();
	}
	get(key) {
		return this.items.get(key);
	}
	arrayWrite(key,value) {
		this.items.set(key,value);
		return value;
	}
	toString() {
		let data = [];
		let _g_current = 0;
		let _g_array = this.items._keys;
		while(_g_current < _g_array.length) {
			let key = _g_array[_g_current++];
			data.push(key + " => " + Std.string(this.items.get(key)));
		}
		return "MapSchema (" + Lambda.count(this.items) + ") { " + data.join(", ") + " }";
	}
}
io_colyseus_serializer_schema_MapSchema_$Dynamic.__name__ = true;
Object.assign(io_colyseus_serializer_schema_MapSchema_$Dynamic.prototype, {
	__class__: io_colyseus_serializer_schema_MapSchema_$Dynamic
	,__properties__: {get_length: "get_length"}
});
class io_colyseus_serializer_schema_Decorator {
}
io_colyseus_serializer_schema_Decorator.__name__ = true;
class io_colyseus_serializer_schema_SPEC {
	static numberCheck(bytes,it) {
		let prefix = bytes.b[it.offset];
		if(prefix >= 128) {
			if(prefix >= 202) {
				return prefix <= 211;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static arrayCheck(bytes,it) {
		return bytes.b[it.offset] < 160;
	}
	static nilCheck(bytes,it) {
		return bytes.b[it.offset] == io_colyseus_serializer_schema_SPEC.NIL;
	}
	static indexChangeCheck(bytes,it) {
		return bytes.b[it.offset] == io_colyseus_serializer_schema_SPEC.INDEX_CHANGE;
	}
	static stringCheck(bytes,it) {
		let prefix = bytes.get(it.offset);
		if(!(prefix < 192 && prefix > 160 || prefix == 217 || prefix == 218)) {
			return prefix == 219;
		} else {
			return true;
		}
	}
}
io_colyseus_serializer_schema_SPEC.__name__ = true;
class io_colyseus_serializer_schema_Decoder {
	constructor() {
	}
	decodePrimitiveType(type,bytes,it) {
		switch(type) {
		case "boolean":
			return this.boolean(bytes,it);
		case "float32":
			return this.float32(bytes,it);
		case "float64":
			return this.float64(bytes,it);
		case "int16":
			return this.int16(bytes,it);
		case "int32":
			return this.int32(bytes,it);
		case "int64":
			return this.int64(bytes,it);
		case "int8":
			return this.int8(bytes,it);
		case "number":
			return this.number(bytes,it);
		case "string":
			return this.string(bytes,it);
		case "uint16":
			return this.uint16(bytes,it);
		case "uint32":
			return this.uint32(bytes,it);
		case "uint64":
			return this.uint64(bytes,it);
		case "uint8":
			return this.uint8(bytes,it);
		default:
			throw haxe_Exception.thrown("can't decode: " + type);
		}
	}
	string(bytes,it) {
		let prefix = bytes.b[it.offset++];
		let length = 0;
		if(prefix < 192) {
			length = prefix & 31;
		} else if(prefix == 217) {
			length = this.uint8(bytes,it);
		} else if(prefix == 218) {
			length = this.uint16(bytes,it);
		} else if(prefix == 219) {
			length = this.uint32(bytes,it);
		}
		let value = bytes.getString(it.offset,length);
		it.offset += length;
		return value;
	}
	number(bytes,it) {
		let prefix = bytes.b[it.offset++];
		if(prefix < 128) {
			return prefix;
		} else if(prefix == 202) {
			return this.float32(bytes,it);
		} else if(prefix == 203) {
			return this.float64(bytes,it);
		} else if(prefix == 204) {
			return this.uint8(bytes,it);
		} else if(prefix == 205) {
			return this.uint16(bytes,it);
		} else if(prefix == 206) {
			return this.uint32(bytes,it);
		} else if(prefix == 207) {
			return this.uint64(bytes,it);
		} else if(prefix == 208) {
			return this.int8(bytes,it);
		} else if(prefix == 209) {
			return this.int16(bytes,it);
		} else if(prefix == 210) {
			return this.int32(bytes,it);
		} else if(prefix == 211) {
			return this.int64(bytes,it);
		} else if(prefix > 223) {
			return (255 - prefix + 1) * -1;
		}
		return 0;
	}
	boolean(bytes,it) {
		return this.uint8(bytes,it) > 0;
	}
	int8(bytes,it) {
		return this.uint8(bytes,it) << 24 >> 24;
	}
	uint8(bytes,it) {
		return bytes.b[it.offset++];
	}
	int16(bytes,it) {
		return this.uint16(bytes,it) << 16 >> 16;
	}
	uint16(bytes,it) {
		return bytes.b[it.offset++] | bytes.b[it.offset++] << 8;
	}
	int32(bytes,it) {
		let value = bytes.getInt32(it.offset);
		it.offset += 4;
		return value;
	}
	uint32(bytes,it) {
		return this.int32(bytes,it) >>> 0;
	}
	int64(bytes,it) {
		let value = bytes.getInt64(it.offset);
		it.offset += 8;
		return value;
	}
	uint64(bytes,it) {
		let low = this.uint32(bytes,it);
		let high = this.uint32(bytes,it) * Math.pow(2,32);
		let this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	float32(bytes,it) {
		let value = bytes.getFloat(it.offset);
		it.offset += 4;
		return value;
	}
	float64(bytes,it) {
		let value = bytes.getDouble(it.offset);
		it.offset += 8;
		return value;
	}
}
io_colyseus_serializer_schema_Decoder.__name__ = true;
Object.assign(io_colyseus_serializer_schema_Decoder.prototype, {
	__class__: io_colyseus_serializer_schema_Decoder
});
class io_colyseus_serializer_schema_ArraySchema {
	constructor() {
		this.items = [];
	}
	get_length() {
		return this.items.length;
	}
	onAdd(item,key) {
	}
	onChange(item,key) {
	}
	onRemove(item,key) {
	}
	clone() {
		let cloned = new io_colyseus_serializer_schema_ArraySchema();
		cloned.items = this.items.slice();
		cloned.onAdd = $bind(this,this.onAdd);
		cloned.onChange = $bind(this,this.onChange);
		cloned.onRemove = $bind(this,this.onRemove);
		return cloned;
	}
	iterator() {
		return new haxe_iterators_ArrayIterator(this.items);
	}
	toString() {
		let data = [];
		let _g = 0;
		let _g1 = this.items;
		while(_g < _g1.length) {
			let item = _g1[_g];
			++_g;
			data.push("" + Std.string(item));
		}
		return "ArraySchema(" + Lambda.count(this.items) + ") { " + data.join(", ") + " } ";
	}
}
io_colyseus_serializer_schema_ArraySchema.__name__ = true;
Object.assign(io_colyseus_serializer_schema_ArraySchema.prototype, {
	__class__: io_colyseus_serializer_schema_ArraySchema
	,__properties__: {get_length: "get_length"}
});
class io_colyseus_serializer_schema_OrderedMapIterator {
	constructor(omap) {
		this.index = 0;
		this.map = omap;
	}
	hasNext() {
		return this.index < this.map._keys.length;
	}
	next() {
		return this.map.get(this.map._keys[this.index++]);
	}
}
io_colyseus_serializer_schema_OrderedMapIterator.__name__ = true;
Object.assign(io_colyseus_serializer_schema_OrderedMapIterator.prototype, {
	__class__: io_colyseus_serializer_schema_OrderedMapIterator
});
class io_colyseus_serializer_schema_OrderedMap {
	constructor(_map) {
		this.idx = 0;
		this._keys = [];
		this.map = _map;
	}
	set(key,value) {
		if(!this.map.exists(key)) {
			this._keys.push(key);
		}
		this.map.set(key,value);
	}
	toString() {
		let _ret = "";
		let _cnt = 0;
		let _len = this._keys.length;
		let _g = 0;
		let _g1 = this._keys;
		while(_g < _g1.length) {
			let k = _g1[_g];
			++_g;
			_ret += "" + Std.string(k) + " => " + Std.string(this.map.get(k)) + (_cnt++ < _len - 1 ? ", " : "");
		}
		return "{" + _ret + "}";
	}
	iterator() {
		return new io_colyseus_serializer_schema_OrderedMapIterator(this);
	}
	remove(key) {
		if(this.map.remove(key)) {
			return HxOverrides.remove(this._keys,key);
		} else {
			return false;
		}
	}
	exists(key) {
		return this.map.exists(key);
	}
	get(key) {
		return this.map.get(key);
	}
	keys() {
		return new haxe_iterators_ArrayIterator(this._keys);
	}
}
io_colyseus_serializer_schema_OrderedMap.__name__ = true;
Object.assign(io_colyseus_serializer_schema_OrderedMap.prototype, {
	__class__: io_colyseus_serializer_schema_OrderedMap
});
class io_colyseus_serializer_schema_MapSchema {
	constructor() {
		this.items = new io_colyseus_serializer_schema_OrderedMap(new haxe_ds_StringMap());
	}
	get_length() {
		return this.items._keys.length;
	}
	onAdd(item,key) {
	}
	onChange(item,key) {
	}
	onRemove(item,key) {
	}
	clone() {
		let cloned = new io_colyseus_serializer_schema_MapSchema();
		let _g_current = 0;
		let _g_array = this.items._keys;
		while(_g_current < _g_array.length) {
			let key = _g_array[_g_current++];
			cloned.items.set(key,this.items.get(key));
		}
		cloned.onAdd = $bind(this,this.onAdd);
		cloned.onChange = $bind(this,this.onChange);
		cloned.onRemove = $bind(this,this.onRemove);
		return cloned;
	}
	iterator() {
		return this.items.iterator();
	}
	get(key) {
		return this.items.get(key);
	}
	arrayWrite(key,value) {
		this.items.set(key,value);
		return value;
	}
	toString() {
		let data = [];
		let _g_current = 0;
		let _g_array = this.items._keys;
		while(_g_current < _g_array.length) {
			let key = _g_array[_g_current++];
			data.push(key + " => " + Std.string(this.items.get(key)));
		}
		return "MapSchema (" + Lambda.count(this.items) + ") { " + data.join(", ") + " }";
	}
}
io_colyseus_serializer_schema_MapSchema.__name__ = true;
Object.assign(io_colyseus_serializer_schema_MapSchema.prototype, {
	__class__: io_colyseus_serializer_schema_MapSchema
	,__properties__: {get_length: "get_length"}
});
class io_colyseus_serializer_schema_Schema {
	constructor() {
		if(io_colyseus_serializer_schema_Schema._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
		this._childPrimitiveTypes = new haxe_ds_IntMap();
		this._childSchemaTypes = new haxe_ds_IntMap();
		this._types = new haxe_ds_IntMap();
		this._indexes = new haxe_ds_IntMap();
	}
	onChange(changes) {
	}
	onRemove() {
	}
	decode(bytes,it) {
		let changes = [];
		if(it == null) {
			it = { offset : 0};
		}
		let totalBytes = bytes.length;
		while(it.offset < totalBytes) {
			let isNil = io_colyseus_serializer_schema_SPEC.nilCheck(bytes,it);
			if(isNil) {
				it.offset++;
			}
			let index = bytes.b[it.offset++];
			if(index == io_colyseus_serializer_schema_SPEC.END_OF_STRUCTURE) {
				break;
			}
			let field = this._indexes.h[index];
			let type = this._types.h[index];
			let value = null;
			let hasChange = false;
			if(field == null) {
				continue;
			} else if(isNil) {
				value = null;
				hasChange = true;
			} else if(type == "ref") {
				let constructor = this._childSchemaTypes.h[index];
				value = Reflect.getProperty(this,field);
				if(value == null) {
					value = Type.createInstance(constructor,[]);
				}
				value.decode(bytes,it);
				hasChange = true;
			} else if(type == "array") {
				let isSchemaType = this._childSchemaTypes.h.hasOwnProperty(index);
				type = isSchemaType ? this._childSchemaTypes.h[index] : this._childPrimitiveTypes.h[index];
				let valueRef = Reflect.getProperty(this,field);
				if(valueRef == null) {
					valueRef = new io_colyseus_serializer_schema_ArraySchema_$Dynamic();
				}
				value = valueRef.clone();
				let newLength = io_colyseus_serializer_schema_Schema.decoder.number(bytes,it);
				let numChanges = js_Boot.__cast(Math.min(io_colyseus_serializer_schema_Schema.decoder.number(bytes,it),newLength) , Int);
				let hasRemoval = value.items.length > newLength;
				hasChange = numChanges > 0 || hasRemoval;
				let hasIndexChange = false;
				if(hasRemoval) {
					let items = js_Boot.__cast(valueRef.items , Array);
					let _g = newLength;
					let _g1 = valueRef.items.length;
					while(_g < _g1) {
						let i = _g++;
						let itemRemoved = items[i];
						if(isSchemaType && itemRemoved.onRemove != null) {
							itemRemoved.onRemove();
						}
						HxOverrides.remove(js_Boot.__cast(value.items , Array),itemRemoved);
						valueRef.onRemove(itemRemoved,newLength + i);
					}
				}
				let _g = 0;
				let _g1 = numChanges;
				while(_g < _g1) {
					let i = _g++;
					let newIndex = io_colyseus_serializer_schema_Schema.decoder.number(bytes,it);
					let indexChangedFrom = -1;
					if(io_colyseus_serializer_schema_SPEC.indexChangeCheck(bytes,it)) {
						it.offset++;
						indexChangedFrom = io_colyseus_serializer_schema_Schema.decoder.number(bytes,it);
						hasIndexChange = true;
					}
					let isNew = !hasIndexChange && value.items[newIndex] == null || hasIndexChange && indexChangedFrom == -1;
					if(isSchemaType) {
						let item = null;
						if(isNew) {
							item = Type.createInstance(type,[]);
						} else if(indexChangedFrom != -1) {
							item = valueRef.items[indexChangedFrom];
						} else {
							item = valueRef.items[newIndex];
						}
						if(item == null) {
							item = Type.createInstance(type,[]);
							isNew = true;
						}
						item.decode(bytes,it);
						value.items[newIndex] = item;
					} else {
						value.items[newIndex] = io_colyseus_serializer_schema_Schema.decoder.decodePrimitiveType(type,bytes,it);
					}
					if(isNew) {
						valueRef.onAdd(value.items[newIndex],newIndex);
					} else {
						valueRef.onChange(value.items[newIndex],newIndex);
					}
				}
			} else if(type == "map") {
				let isSchemaType = this._childSchemaTypes.h.hasOwnProperty(index);
				type = isSchemaType ? this._childSchemaTypes.h[index] : this._childPrimitiveTypes.h[index];
				let valueRef = Reflect.getProperty(this,field);
				if(valueRef == null) {
					valueRef = new io_colyseus_serializer_schema_MapSchema_$Dynamic();
				}
				value = valueRef.clone();
				let length = io_colyseus_serializer_schema_Schema.decoder.number(bytes,it);
				hasChange = length > 0;
				let hasIndexChange = false;
				let previousKeys = [];
				let keysIterator = valueRef.items.keys();
				while(keysIterator.hasNext()) previousKeys.push(keysIterator.next());
				let _g = 0;
				let _g1 = length;
				while(_g < _g1) {
					let i = _g++;
					if(it.offset >= bytes.length || bytes.b[it.offset] == io_colyseus_serializer_schema_SPEC.END_OF_STRUCTURE) {
						break;
					}
					let isNilItem = io_colyseus_serializer_schema_SPEC.nilCheck(bytes,it);
					if(isNilItem) {
						it.offset++;
					}
					let previousKey = "";
					if(io_colyseus_serializer_schema_SPEC.indexChangeCheck(bytes,it)) {
						it.offset++;
						previousKey = previousKeys[io_colyseus_serializer_schema_Schema.decoder.number(bytes,it)];
						hasIndexChange = true;
					}
					let hasMapIndex = io_colyseus_serializer_schema_SPEC.numberCheck(bytes,it);
					let newKey = hasMapIndex ? previousKeys[io_colyseus_serializer_schema_Schema.decoder.number(bytes,it)] : io_colyseus_serializer_schema_Schema.decoder.string(bytes,it);
					let item;
					let isNew = !hasIndexChange && !valueRef.items.exists(newKey) || hasIndexChange && previousKey == "" && hasMapIndex;
					if(isNew && isSchemaType) {
						item = Type.createInstance(type,[]);
					} else if(previousKey != "") {
						item = valueRef.items.get(previousKey);
					} else {
						item = valueRef.items.get(newKey);
					}
					if(isNilItem) {
						if(item && isSchemaType) {
							item.onRemove();
						}
						valueRef.onRemove(item,newKey);
						value.items.remove(newKey);
						continue;
					} else if(!isSchemaType) {
						let decodedValue = io_colyseus_serializer_schema_Schema.decoder.decodePrimitiveType(type,bytes,it);
						value.items.set(newKey,decodedValue);
					} else {
						item.decode(bytes,it);
						value.items.set(newKey,item);
					}
					if(isNew) {
						valueRef.onAdd(item,newKey);
					} else {
						valueRef.onChange(item,newKey);
					}
				}
			} else {
				value = io_colyseus_serializer_schema_Schema.decoder.decodePrimitiveType(type,bytes,it);
				hasChange = true;
			}
			if(hasChange) {
				changes.push({ field : field, value : value, previousValue : Reflect.getProperty(this,field)});
			}
			this[field] = value;
		}
		if(changes.length > 0) {
			this.onChange(changes);
		}
	}
	toString() {
		let data = [];
		let field = this._indexes.iterator();
		while(field.hasNext()) {
			let field1 = field.next();
			data.push(field1 + " => " + Std.string(Reflect.getProperty(this,field1)));
		}
		return "{ " + data.join(", ") + " }";
	}
}
io_colyseus_serializer_schema_Schema.__name__ = true;
Object.assign(io_colyseus_serializer_schema_Schema.prototype, {
	__class__: io_colyseus_serializer_schema_Schema
});
class io_colyseus_serializer_schema_Context {
	constructor() {
		this.schemas = [];
		this.typeIds = new haxe_ds_IntMap();
	}
	add(schema,typeid) {
		if(typeid == null) {
			typeid = this.schemas.length;
		}
		this.typeIds.h[typeid] = schema;
		this.schemas.push(schema);
	}
	get(typeid) {
		return this.typeIds.h[typeid];
	}
}
io_colyseus_serializer_schema_Context.__name__ = true;
Object.assign(io_colyseus_serializer_schema_Context.prototype, {
	__class__: io_colyseus_serializer_schema_Context
});
class io_colyseus_serializer_schema_ReflectionField extends io_colyseus_serializer_schema_Schema {
	constructor() {
		super();
		this._indexes.h[0] = "name";
		this._types.h[0] = "string";
		this._indexes.h[1] = "type";
		this._types.h[1] = "string";
		this._indexes.h[2] = "referencedType";
		this._types.h[2] = "uint8";
	}
}
io_colyseus_serializer_schema_ReflectionField.__name__ = true;
io_colyseus_serializer_schema_ReflectionField.__super__ = io_colyseus_serializer_schema_Schema;
Object.assign(io_colyseus_serializer_schema_ReflectionField.prototype, {
	__class__: io_colyseus_serializer_schema_ReflectionField
});
class io_colyseus_serializer_schema_ReflectionType extends io_colyseus_serializer_schema_Schema {
	constructor() {
		io_colyseus_serializer_schema_Schema._hx_skip_constructor = true;
		super();
		io_colyseus_serializer_schema_Schema._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.fields = new io_colyseus_serializer_schema_ArraySchema_$io_$colyseus_$serializer_$schema_$ReflectionField();
		super._hx_constructor();
		this._indexes.h[0] = "id";
		this._types.h[0] = "uint8";
		this._indexes.h[1] = "fields";
		this._types.h[1] = "array";
		this._childSchemaTypes.h[1] = io_colyseus_serializer_schema_ReflectionField;
	}
}
io_colyseus_serializer_schema_ReflectionType.__name__ = true;
io_colyseus_serializer_schema_ReflectionType.__super__ = io_colyseus_serializer_schema_Schema;
Object.assign(io_colyseus_serializer_schema_ReflectionType.prototype, {
	__class__: io_colyseus_serializer_schema_ReflectionType
});
class io_colyseus_serializer_schema_Reflection extends io_colyseus_serializer_schema_Schema {
	constructor() {
		io_colyseus_serializer_schema_Schema._hx_skip_constructor = true;
		super();
		io_colyseus_serializer_schema_Schema._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.types = new io_colyseus_serializer_schema_ArraySchema_$io_$colyseus_$serializer_$schema_$ReflectionType();
		super._hx_constructor();
		this._indexes.h[0] = "types";
		this._types.h[0] = "array";
		this._childSchemaTypes.h[0] = io_colyseus_serializer_schema_ReflectionType;
		this._indexes.h[1] = "rootType";
		this._types.h[1] = "uint8";
	}
}
io_colyseus_serializer_schema_Reflection.__name__ = true;
io_colyseus_serializer_schema_Reflection.__super__ = io_colyseus_serializer_schema_Schema;
Object.assign(io_colyseus_serializer_schema_Reflection.prototype, {
	__class__: io_colyseus_serializer_schema_Reflection
});
class js_Boot {
	static getClass(o) {
		if(o == null) {
			return null;
		} else if(((o) instanceof Array)) {
			return Array;
		} else {
			let cl = o.__class__;
			if(cl != null) {
				return cl;
			}
			let name = js_Boot.__nativeClassName(o);
			if(name != null) {
				return js_Boot.__resolveNativeClass(name);
			}
			return null;
		}
	}
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				let e = $hxEnums[o.__enum__];
				let n = e.__constructs__[o._hx_index];
				let con = e[n];
				if(con.__params__) {
					s = s + "\t";
					return n + "(" + ((function($this) {
						var $r;
						let _g = [];
						{
							let _g1 = 0;
							let _g2 = con.__params__;
							while(true) {
								if(!(_g1 < _g2.length)) {
									break;
								}
								let p = _g2[_g1];
								_g1 = _g1 + 1;
								_g.push(js_Boot.__string_rec(o[p],s));
							}
						}
						$r = _g;
						return $r;
					}(this))).join(",") + ")";
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				let str = "[";
				s += "\t";
				let _g = 0;
				let _g1 = o.length;
				while(_g < _g1) {
					let i = _g++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr;
			try {
				tostr = o.toString;
			} catch( _g ) {
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n";
			s += "\t";
			let hasp = o.hasOwnProperty != null;
			let k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
	static __interfLoop(cc,cl) {
		if(cc == null) {
			return false;
		}
		if(cc == cl) {
			return true;
		}
		let intf = cc.__interfaces__;
		if(intf != null && (cc.__super__ == null || cc.__super__.__interfaces__ != intf)) {
			let _g = 0;
			let _g1 = intf.length;
			while(_g < _g1) {
				let i = _g++;
				let i1 = intf[i];
				if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
					return true;
				}
			}
		}
		return js_Boot.__interfLoop(cc.__super__,cl);
	}
	static __instanceof(o,cl) {
		if(cl == null) {
			return false;
		}
		switch(cl) {
		case Array:
			return ((o) instanceof Array);
		case Bool:
			return typeof(o) == "boolean";
		case Dynamic:
			return o != null;
		case Float:
			return typeof(o) == "number";
		case Int:
			if(typeof(o) == "number") {
				return ((o | 0) === o);
			} else {
				return false;
			}
			break;
		case String:
			return typeof(o) == "string";
		default:
			if(o != null) {
				if(typeof(cl) == "function") {
					if(js_Boot.__downcastCheck(o,cl)) {
						return true;
					}
				} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
					if(((o) instanceof cl)) {
						return true;
					}
				}
			} else {
				return false;
			}
			if(cl == Class ? o.__name__ != null : false) {
				return true;
			}
			if(cl == Enum ? o.__ename__ != null : false) {
				return true;
			}
			return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
		}
	}
	static __downcastCheck(o,cl) {
		if(!((o) instanceof cl)) {
			if(cl.__isInterface__) {
				return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static __cast(o,t) {
		if(o == null || js_Boot.__instanceof(o,t)) {
			return o;
		} else {
			throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
		}
	}
	static __nativeClassName(o) {
		let name = js_Boot.__toStr.call(o).slice(8,-1);
		if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
			return null;
		}
		return name;
	}
	static __isNativeObj(o) {
		return js_Boot.__nativeClassName(o) != null;
	}
	static __resolveNativeClass(name) {
		return $global[name];
	}
}
js_Boot.__name__ = true;
class schema_Avatar extends io_colyseus_serializer_schema_Schema {
	constructor() {
		io_colyseus_serializer_schema_Schema._hx_skip_constructor = true;
		super();
		io_colyseus_serializer_schema_Schema._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.state = 0;
		this.color = 0;
		this.y = 0;
		this.x = 0;
		this.id = "";
		super._hx_constructor();
		this._indexes.h[0] = "id";
		this._types.h[0] = "string";
		this._indexes.h[1] = "x";
		this._types.h[1] = "number";
		this._indexes.h[2] = "y";
		this._types.h[2] = "number";
		this._indexes.h[3] = "color";
		this._types.h[3] = "number";
		this._indexes.h[4] = "state";
		this._types.h[4] = "uint8";
	}
}
schema_Avatar.__name__ = true;
schema_Avatar.__super__ = io_colyseus_serializer_schema_Schema;
Object.assign(schema_Avatar.prototype, {
	__class__: schema_Avatar
});
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
js_Boot.__toStr = ({ }).toString;
io_colyseus_serializer_schema_SPEC.END_OF_STRUCTURE = 193;
io_colyseus_serializer_schema_SPEC.NIL = 192;
io_colyseus_serializer_schema_SPEC.INDEX_CHANGE = 212;
io_colyseus_serializer_schema_Schema._hx_skip_constructor = false;
io_colyseus_serializer_schema_Schema.decoder = new io_colyseus_serializer_schema_Decoder();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=game.js.map